{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/profileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","bigAvatar","src","descriptionBlock","photos","large","userPhoto","main","target","files","length","initialValues","formData","then","Post","item","message","likesCount","MyPosts","React","memo","postsElements","posts","p","id","classmessage","postsBlock","AddPostFormRedux","dispatch","addPost","newPostBody","reset","maxLength10","maxLengthCreator","Field","component","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","newPostText","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refrehsProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.c9a92e96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__quahA\",\"bigAvatar\":\"ProfileInfo_bigAvatar__3upzX\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3h1_R\",\"contact\":\"ProfileInfo_contact__foD8y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2Y7Zh\",\"posts\":\"MyPosts_posts__108fy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__-_V4d\",\"item\":\"Post_item__1JEyK\"};","import React, { useState, useEffect } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n  /*let stateWithSetState = useState(true); //отдает массив с двумя элементами\r\n  let editMode = stateWithSetState[0]; //первый элемент – это само значение\r\n  let setEditMode = stateWithSetState[1]; //второй элемент – это функция для изменения\r\n  */\r\n\r\n\r\n  let [editMode, setEditMode] = useState(false); //деструктивное присваивание для более короткой записи\r\n  let [status, setStatus] = useState(props.status); //при работе с хуками приходится для каждого свойства стейта так делать\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  }, [props.status])\r\n\r\n\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  }\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  }\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!editMode &&\r\n        <div>\r\n          <b>Status</b>:<span onDoubleClick={activateEditMode}>{props.status || \"------\"}</span>\r\n        </div>\r\n      }\r\n      {editMode &&\r\n        <div>\r\n          <input onChange={onStatusChange}\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            value={status} />\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\nimport { createField, Input, Textarea } from \"../../common/FormsControls/FormsControls\"\r\nimport { reduxForm } from \"redux-form\";\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n  return <form onSubmit={handleSubmit}>\r\n    <div><button>Save</button></div>\r\n    {error && <div className={style.formSummaryError}>\r\n      {error}\r\n    </div>\r\n    }\r\n    <div>\r\n      <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n    </div>\r\n\r\n    <div>\r\n      <b>My professional skills</b>:\r\n        {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n    </div>\r\n\r\n    <div>\r\n      <b>About me</b>:\r\n      {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n        return <div key={key} className={s.contact}>\r\n          <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n        </div >\r\n      })}\r\n    </div>\r\n  </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from './profileDataForm';\r\n\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const mainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData) => {\r\n    const promise = saveProfile(formData);\r\n    promise.then( \r\n      () => {\r\n        setEditMode(false);\r\n      }\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.bigAvatar}>\r\n        <img src=\"https://atlantis.nyc3.digitaloceanspaces.com/styled/72025f140f22a3eb32950bbb9d76e68d\" />\r\n      </div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large || userPhoto} className={s.main} />\r\n        {isOwner && <input type={\"file\"} onChange={mainPhotoSelected} />}\r\n\r\n        {editMode\r\n          ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n          : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />}\r\n\r\n\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n  return <div>\r\n    {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n    <div>\r\n      <b>Full name</b>: {profile.fullName}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n      <div>\r\n        <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n    }\r\n    <div>\r\n      <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n    </div>\r\n\r\n    <div>\r\n      <b>About me</b>: {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n      })}\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n  return <div className={s.contact}>\r\n    <b>{contactTitle}</b>: {contactValue}\r\n  </div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n               <img src=\"https://cdn3.iconfinder.com/data/icons/business-avatar-1/512/4_avatar-512.png\" />\r\n                {props.message}\r\n                \t<div>\r\n                \t\t<span>Like:</span>{props.likesCount}\r\n                \t</div>\r\n              </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { reduxForm, Field, reset } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements = props.posts\r\n        .map( p => <Post message = {p.message} key={p.id} likesCount={p.likesCount} /> );\r\n    \r\n\r\n    let onAddPost = (e, dispatch) => {\r\n      props.addPost(e.newPostBody);\r\n      dispatch(reset(\"profileAddPostForm\"));\r\n    }\r\n\r\n\r\n\treturn  (\r\n\t\t        <div classmessage={s.postsBlock}>\r\n          <h3>My posts</h3>\r\n            <div>\r\n              <AddPostFormRedux onSubmit={onAddPost} />\r\n            </div>\r\n              <div classmessage={s.posts}>\r\n                  {postsElements}\r\n              </div>\r\n        </div>\r\n\t\t)\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm = (props) => {\r\n \r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n          <Field component={Textarea} name=\"newPostBody\" placeholder=\"Post message\"\r\n                 validate={[required, maxLength10]} />\r\n      </div>\r\n        <div>\r\n          <button>Add post</button>\r\n        </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm({form: \"profileAddPostForm\"}) (AddPostForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from '../../../redux/profile-reducer' ;\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      addPost: (newPostText) => dispatch(addPostActionCreator(newPostText))\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n\treturn  (\r\n\t\t  <div>\r\n        <ProfileInfo savePhoto={props.savePhoto}\r\n        isOwner={props.isOwner} \r\n        profile={props.profile} \r\n        status={props.status} \r\n        updateStatus={props.updateStatus}\r\n        saveProfile={props.saveProfile} /> \r\n        <MyPostsContainer />\r\n      </div>\r\n\t\t)\r\n}\r\n\r\nexport default Profile;","import React, { Component } from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from '../../redux/profile-reducer';\r\nimport {withRouter} from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refrehsProfile() { //вспомогательный метод, чтобы код не дублировался в маунт и апдейт одинаковый\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        } \r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n   \r\n   \r\n    componentDidMount() {\r\n        this.refrehsProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refrehsProfile();\r\n        }\r\n    }\r\n    \r\n    \r\n    render() { \r\n        return  (\r\n           <Profile {...this.props} \r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status} \r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto} />\r\n            )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}