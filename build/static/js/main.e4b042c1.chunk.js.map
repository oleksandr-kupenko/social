{"version":3,"sources":["redux/profile-reducer.ts","api/api.ts","redux/dialogs-reducer.ts","assets/images/user.png","components/Navbar/Navbar.module.css","components/Users/users.module.css","components/common/FormsControls/FormsControls.tsx","serviceWorker.js","logo.svg","redux/sidebar-reducer.ts","utils/object-helpers.js","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Setings/Setings.jsx","components/common/Paginator/Paginator.tsx","components/Users/User.jsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/Login.tsx","components/hoc/withSuspense.js","App.js","index.js","assets/images/preloader.svg","components/common/Preloader/Preloader.js","components/common/Paginator/Paginator.module.css","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/Header/Header.module.css"],"names":["ADD_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","initialState","posts","id","message","likesCount","profile","status","newPostText","addPostActionCreator","type","setStatus","getUserProfile","userId","dispatch","a","usersAPI","getProfile","response","data","getStatus","profileAPI","updateStatus","resultCode","savePhoto","file","photos","saveProfile","getState","auth","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","resultCodeEnum","resultCodeForCapcthaEnum","instance","axios","create","withCredentials","baseURL","headers","requestUsers","page","pageSize","get","then","follow","post","unfollow","delete","console","warn","put","photoFile","formData","FormData","append","authAPI","me","res","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","SEND_MESSAGE","dialogs","name","sendMessageCreator","newMessageBody","dialogsReducer","body","module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","Boolean","window","location","hostname","match","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOOGLE_IS_FETCHING","TOOGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","currentPage","isFetching","followingInProgress","followSuccess","toogleIsFetching","toogleFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","count","filter","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","isAuth","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","url","getAuthUserData","meData","Success","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","usersPage","app","apphReducer","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Navbar","s","nav","item","to","activeClassName","active","News","Music","Setings","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionPageNumber","leftPortionPageNumber","rightPortionPageNumber","selectedPage","paginator","onClick","p","cn","pageNumber","key","e","User","user","src","small","userPhoto","disabled","some","Users","getUsers","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","pageTitle","Preloader","React","Component","connect","bind","totalCount","Header","header","loginBlock","HeaderContainer","LoginReduxForm","reduxForm","handleSubmit","onSubmit","required","undefined","style","formSummaryError","CaptchaIsRequared","length","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","cathcAllUnhandledErrors","reason","promise","alert","log","initializeApp","addEventListener","removeEventListener","exact","from","path","render","AppContainer","withRouter","all","NewApp","basename","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","backgroundColor","preloader","value","maxLengthCreator","maxLength"],"mappings":"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","file":"static/js/main.e4b042c1.chunk.js","sourcesContent":["import { usersAPI, profileAPI } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { PhotosType, PostType, Profiletype } from \"../types/types\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: 'Hi, how are you', likesCount: 10 },\r\n        { id: 2, message: 'Its is my first post', likesCount: 15 },\r\n        { id: 3, message: 'Good', likesCount: 16 },\r\n        { id: 4, message: 'How are you', likesCount: 20 },\r\n        { id: 5, message: 'Im Fine', likesCount: 0 },\r\n        { id: 6, message: 'And, you', likesCount: 0 },\r\n    ] as Array<PostType>,\r\n    profile: null as Profiletype | null,\r\n    status: \"\",\r\n    newPostText: \"\"\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const profileReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile };\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } as Profiletype };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype AddPostActionCreatorActionType = {\r\n    type: typeof ADD_POST\r\n    newPostText: string\r\n}\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorActionType => ({ type: ADD_POST, newPostText });\r\n\r\ntype SetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: Profiletype\r\n}\r\nconst setUserProfile = (profile: Profiletype): SetUserProfileActionType => ({ type: SET_USER_PROFILE, profile });\r\n\r\ntype SetStatusActionType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\nconst setStatus = (status: string): SetStatusActionType => ({ type: SET_STATUS, status });\r\n\r\ntype SavePhotoSuccessActionType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photos: PhotosType\r\n}\r\nconst savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessActionType => ({ type: SAVE_PHOTO_SUCCESS, photos });\r\n\r\ntype DeletePostActionType = {\r\n    type: typeof DELETE_POST\r\n    postId: number\r\n}\r\nconst deletePost = (postId: number): DeletePostActionType  => ({type: DELETE_POST, postId})\r\n\r\n\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: any) => {\r\n    let response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n}\r\n\r\nexport const getStatus = (userId: number) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data));\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    try {\r\n        let response = await profileAPI.updateStatus(status);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n    } catch (error) {\r\n        //отлавливаем здесь ошибку и диспатчим что-то. Можно так локально не делать, а глобальным перехватчиком в App.js перехватывать\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: any) => async (dispatch: any) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: Profiletype) => async (dispatch: any, getState: any) => {\r\n    const userId = getState().auth.userId;\r\n    const response = await profileAPI.saveProfile(profile);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getUserProfile(userId));\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", { _error: response.data.messages[0] })); //общая ошибка формы\r\n        //dispatch(stopSubmit(\"edit-profile\", {\"contacts\": {\"facebook\": response.data.messages[0]} })); //ошибка для поля фейсбук, но нужно править, чтобы была универсальной для остальных полей\r\n        return Promise.reject(response.data.messages[0]);\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import axios, { AxiosResponse } from 'axios';\r\nimport { Profiletype } from '../types/types';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: { \"API-KEY\": \"7bed4946-9972-4e0e-bf8f-b616807e7b9c\" }\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n    requestUsers(page = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${page}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    follow(id: number) {\r\n        return instance.post(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please use profileAPI object.');\r\n        return profileAPI.getProfile(userId);\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/${userId}`);\r\n\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status', { status: status });\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n    saveProfile(profile: Profiletype) {\r\n        return instance.put('profile', profile);\r\n    }\r\n}\r\n\r\nexport enum resultCodeEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum resultCodeForCapcthaEnum {\r\n    CaptchaIsRequared = 10\r\n} \r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: resultCodeEnum\r\n    messages: Array<string>\r\n}\r\n\r\ntype LoginResponseType = {\r\n    data: {\r\n        userId: number\r\n    }\r\n    resultCode: resultCodeEnum | resultCodeForCapcthaEnum\r\n    messages: Array<string>\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<LoginResponseType>(`auth/login`, { email, password, rememberMe, captcha })\r\n        .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n}\r\n\r\ninstance.get<string>(`auth/me`).then((res: AxiosResponse<string>) => res.data)\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`);\r\n    },\r\n\r\n}\r\n","const SEND_MESSAGE = 'SEND-MESSAGE';\r\n\r\ntype DialogType = {\r\n\tid: number\r\n\tname: string\r\n}\r\n\r\ntype MessageType = {\r\n\tid: number\r\n\tmessage: string\r\n}\r\n\r\nlet initialState = {\r\n\tdialogs: [\r\n\t\t{id: 1, name: 'Dimych'},\r\n\t\t{id: 2, name: 'Sandron'},\r\n\t\t{id: 3, name: 'Kolyan'},\r\n\t\t{id: 4, name: 'Anton'},\r\n\t\t{id: 5, name: 'Ira'},\r\n\t\t{id: 6, name: 'Sveta'},\r\n\t] as Array<DialogType>,\r\n\tmessages: [\r\n\t\t{id: 1, message: 'Hi'},\r\n\t\t{id: 2, message: 'Hello'},\r\n\t\t{id: 3, message: 'Good'},\r\n\t\t{id: 4, message: 'Foo'},\r\n\t\t{id: 5, message: 'Moo'},\r\n\t\t{id: 6, message: 'Doo'}\r\n\t] as Array<MessageType>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst dialogsReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    switch(action.type) {\r\n        case SEND_MESSAGE: {\r\n\t\t\tlet body = action.newMessageBody;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmessages: [...state.messages, {id: 7, message: body}]\r\n\t\t\t};\r\n\t\t}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype sendMessageCreatorActionType = {\r\n\ttype: typeof SEND_MESSAGE\r\n\tnewMessageBody: string\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody: string): sendMessageCreatorActionType => ({type: SEND_MESSAGE, newMessageBody});\r\n\r\nexport default dialogsReducer;","export default __webpack_public_path__ + \"static/media/user.6da69302.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2vcrk\",\"item\":\"Navbar_item__3FDoE\",\"active\":\"Navbar_active__2WwTa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1tOak\",\"usersBlock\":\"users_usersBlock___BdmP\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css';\r\nimport { Field, WrappedFieldProps, WrappedFieldMetaProps } from 'redux-form';\r\nimport { FieldValidator } from '../../../utils/validators/validators';\r\n\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\n\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({ meta: { touched, error }, children }) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")} >\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {\r\n                hasError && <span>{error} </span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  //  const { input, meta, child, ...restProps } = props;\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormControl {...props} > <textarea {...input} {...restProps} /></FormControl >\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const { input, meta, child, ...restProps } = props;\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormControl {...props} > <input {...input} {...restProps} /></FormControl >\r\n}\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n    name: FormKeysType,\r\n    validators: Array<FieldValidator>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props = {}, text = '') {\r\n     return   <div>\r\n            <Field placeholder={placeholder} name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            /> {text}\r\n            </div>\r\n    }\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","let initialState = {};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;\r\n","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n   return items.map( u =>  {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import { usersAPI } from \"../api/api\";\r\nimport { UsersType } from \"../types/types\";\r\nimport { updateObjectInArray } from \"../utils/object-helpers\";\r\n\r\n\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOOGLE_IS_FETCHING = 'TOOGLE_IS_FETCHING';\r\nconst TOOGLE_IS_FOLLOWING_PROGRESS = 'TOOGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 15,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true as boolean,\r\n    followingInProgress: [] as Array<number> //array of users id\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst usersReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch(action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }\r\n        }\r\n        case  SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage}\r\n        } \r\n        case  SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count}\r\n        }\r\n        case  TOOGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching}\r\n        }\r\n        case  TOOGLE_IS_FOLLOWING_PROGRESS: {\r\n            return { \r\n                ...state,\r\n                 followingInProgress: action.isFetching \r\n                 ? [...state.followingInProgress, action.userId] \r\n                 : state.followingInProgress.filter(id => id != action.userId)\r\n                }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype FollowSuccessActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nconst followSuccess = (userId: number): FollowSuccessActionType => ({type: FOLLOW, userId })\r\n\r\ntype UnfollowSuccessActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nconst unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({type: UNFOLLOW, userId })\r\n\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UsersType>\r\n}\r\nexport const setUsers = (users: Array<UsersType>): SetUsersActionType => ({type: SET_USERS, users })\r\n\r\ntype SetCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({type: SET_CURRENT_PAGE, currentPage })\r\n\r\ntype SetTotalUsersCountPageActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    count: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountPageActionType => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\n\r\ntype ToogleIsFetchingPageActionType = {\r\n    type: typeof TOOGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\nexport const toogleIsFetching = (isFetching: boolean): ToogleIsFetchingPageActionType => ({type: TOOGLE_IS_FETCHING, isFetching })\r\n\r\ntype ToogleFollowingProgressActionType = {\r\n    type: typeof TOOGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\nexport const toogleFollowingProgress = (isFetching: boolean, userId: number): ToogleFollowingProgressActionType => ({type: TOOGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n\r\n   return async (dispatch: any) => {\r\n        dispatch (toogleIsFetching(true));\r\n        dispatch (setCurrentPage(page));\r\n\r\n      let data = await usersAPI.requestUsers(page, pageSize);\r\n\r\n                dispatch(toogleIsFetching(false));\r\n                dispatch(setUsers(data.items)); \r\n                dispatch(setTotalUsersCount(data.totalCount)); \r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: any, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toogleFollowingProgress(true, userId));\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode == 0) {\r\n        dispatch(actionCreator(userId));\r\n    } \r\n    dispatch(toogleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n     }\r\n }\r\n\r\n export const unfollow = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n }\r\n\r\nexport default usersReducer;","import { authAPI, resultCodeEnum, resultCodeForCapcthaEnum, securityAPI } from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n \r\n\r\nconst SET_USER_DATA = 'social/auth/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'social/auth/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nexport type InitialStateType2 = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as string | null //if null, then captcha is not requred\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\n\r\n\r\nconst authReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetAuthUserDataActionPayloadType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype SetAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA\r\n    payload: SetAuthUserDataActionPayloadType\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, \r\n    login: string | null, isAuth: boolean): SetAuthUserDataActionType => ({\r\n        type: SET_USER_DATA as typeof SET_USER_DATA, \r\n        payload: { userId, email, login, isAuth }\r\n});\r\n\r\ntype GetCaptchaUrlSuccessType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS\r\n    payload: {captchaUrl: string}\r\n}\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl }\r\n});\r\n\r\n\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n    if (data.resultCode === resultCodeEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (data.resultCode === resultCodeForCapcthaEnum.CaptchaIsRequared) {\r\n            dispatch(getCaptchaUrl());\r\n        } else {\r\n            let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n            dispatch(stopSubmit(\"login\", { _error: message }));\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: any) => {\r\n    const response: any = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl: string = response.data.url;\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n    let meData = await authAPI.me()\r\n\r\n    if (meData.resultCode === resultCodeEnum.Success) {\r\n        let { id, login, email } = meData.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;","import { getAuthUserData } from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nexport type InititalStateType = {\r\n    initialized: boolean\r\n}\r\n\r\n\r\nlet initialState: InititalStateType = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state: InititalStateType = initialState, action: any): InititalStateType => {\r\n    switch(action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n    default:\r\n        return state;\r\n    }\r\n}\r\n\r\ntype InititalizedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = (): InititalizedSuccessActionType  => ({ type: INITIALIZED_SUCCESS});\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then( () => {\r\n        dispatch(initializedSuccess());\r\n    }) \r\n}\r\n\r\nexport default appReducer;","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport apphReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: apphReducer,\r\n    form: formReducer\r\n\r\n}); //объединяем редьюсеры\r\n\r\ntype RootReducerType = typeof reducers; // (globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nlet state: AppStateType;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n\treturn  (\r\n\t\t<nav className={s.nav}>\r\n\t\t     <div className={s.item}>\r\n\t\t        <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n\t\t    </div>\r\n\t\t      <div className={s.item}>\r\n\t\t        <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n\t\t    </div>\r\n\t\t      <div className={`${s.item} ${s.active}`}>\r\n\t\t        <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n\t\t    </div> \r\n\t\t\t<div className={`${s.item}`}>\r\n\t\t        <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n\t\t    </div>\r\n\t\t      <div className={s.item}>\r\n\t\t        <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\r\n\t\t    </div>\r\n\t\t       <div className={s.item}>\r\n\t\t        <NavLink to=\"/setings\" activeClassName={s.active}>Setings</NavLink>\r\n\t\t    </div>\r\n\t\t</nav>\r\n\t\t)\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = () => {\r\n\treturn  (\t\r\n\t\t<div>\r\n\t\t\tNews\r\n\t\t</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = () => {\r\n\treturn  (\t\r\n\t\t<div>\r\n\t\t\tMusic\r\n\t\t</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Setings.module.css';\r\n\r\nconst Setings = () => {\r\n\treturn  (\t\r\n\t\t<div>\r\n\t\t\tSetings\r\n\t\t</div>\r\n    )\r\n}\r\n\r\nexport default Setings;","import React, {useState} from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number \r\n    pageSize: number\r\n    currentPage: number \r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    \r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionPageNumber] = useState(1) \r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    \r\n     \r\n    let currentPageClass = styles.selectedPage + ' ' + styles.pages;\r\n\r\n    return   <div className={styles.paginator}>\r\n\r\n        {portionNumber > 1 && \r\n        <button onClick={ () => {setPortionPageNumber(portionNumber - 1)}}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className = { cn({\r\n                        [styles.selectedPage] : currentPage === p\r\n                    }, styles.pageNumber)}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p);\r\n                    }}>{p}</span>\r\n\r\n            })}\r\n\r\n            {portionCount > portionNumber &&\r\n                <button onClick={ () => {setPortionPageNumber(portionNumber + 1)}}>NEXT</button>}  \r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport styles from './users.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\n\r\n\r\n\r\nlet User = ({user, followingInProgress, unfollow, follow }) => {\r\n\r\n    return (\r\n       <div>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => { unfollow(user.id) }}>\r\n                                Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => { follow(user.id) }}>\r\n                                      Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)\r\n}\r\n\r\nexport default User;","import React, { FC } from 'react';\r\nimport { UsersType } from '../../types/types';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number \r\n    pageSize: number\r\n    currentPage: number \r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UsersType>\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\n\r\nlet Users: FC<PropsType> = ({currentPage, totalUsersCount, pageSize, onPageChanged, users, ...props}) => {\r\n\r\n    return  <div>\r\n                <Paginator currentPage={currentPage} onPageChanged={onPageChanged} \r\n                           totalItemsCount={totalUsersCount} pageSize={pageSize} />\r\n                <div>\r\n                    {\r\n                        users.map(u => <User user={u} \r\n                                            key={u.id} \r\n                                            followingInProgress={props.followingInProgress}\r\n                                            unfollow={props.unfollow}\r\n                                            follow={props.follow}\r\n                                            /> )\r\n                        \r\n                    }\r\n                </div>\r\n            </div>        \r\n}\r\n\r\nexport default Users;","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector( getUsersSelector, (users) => {\r\n    return users;\r\n})\r\n\r\nexport const getPageSize = (state : AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state : AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {follow, unfollow, setCurrentPage,\r\n    toogleFollowingProgress, requestUsers} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { \r\n    getPageSize, \r\n    getUsers, \r\n    getTotalUsersCount, \r\n    getCurrentPage, getIsFetching, \r\n    getFollowingInProgress \r\n} from '../../redux/users-selectors';\r\nimport { UsersType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UsersType>\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    requestUsers: (current: number, pageSize: number ) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let {currentPage, pageSize} = this.props;\r\n        this.props.requestUsers(currentPage, pageSize);     \r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        let {pageSize} = this.props\r\n        this.props.requestUsers(pageNumber, pageSize);\r\n    }\r\n    \r\n    \r\n    render() {\r\n        \r\n        return <>\r\n        <h2>{this.props.pageTitle}</h2>\r\n            { this.props.isFetching ? <Preloader /> : null }\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                        pageSize={this.props.pageSize}\r\n                        currentPage={this.props.currentPage}\r\n                        onPageChanged={this.onPageChanged}\r\n                        users={this.props.users}\r\n                        follow={this.props.follow}\r\n                        unfollow={this.props.unfollow}\r\n                        followingInProgress={this.props.followingInProgress}      \r\n            />\r\n        </> \r\n        \r\n    }\r\n}\r\n\r\n/* let mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage. currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n */\r\n\r\n let mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    \r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType> (mapStateToProps, \r\n        {follow, unfollow, requestUsers}),\r\n        //withAuthRedirect\r\n) (UsersContainer)\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n\treturn  (\r\n\t\t<header className={s.header}>\r\n        <img src='https://w0.pngwave.com/png/935/389/university-of-amikom-yogyakarta-condongcatur-logo-social-media-social-media-png-clip-art.png' />\r\n        <div className={s.loginBlock}>\r\n          {props.isAuth ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n              : <NavLink to={'/login'}>Login</NavLink> \r\n          }\r\n        </div>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport {logout} from '../../redux/auth-reducer';\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n  render() {\r\n    return  <Header {...this.props} />\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login\r\n});\r\nexport default connect(mapStateToProps, {logout}) (HeaderContainer);","import React from 'react';\r\nimport { reduxForm, Field, reset, InjectedFormProps } from 'redux-form';\r\nimport { Input, createField } from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router';\r\nimport style from '../common/FormsControls/FormsControls.module.css';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n// const afterSubmit = (result, dispatch) =>\r\n//   dispatch(reset('ordersTradesSearchForm'));\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n  }\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> \r\n= ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl && createField(\"Symbols from image\", \"captcha\", [required], Input, {}) }\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string> //Extract - берет только те ключи, который асайнятся к строке\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        const onSubmit = (formData: any) => {   \r\n            //dispatch(reset(\"login\"));\r\n            props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n        }\r\n\r\n        if (props.isAuth) {\r\n            return <Redirect to={\"/profile\"} />\r\n        }\r\n\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login}) (Login);","import React, { Suspense } from 'react';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\nexport const withSuspense = (Component) => {\r\n\r\n\r\n    return (props) => {\r\n        return  <Suspense fallback={<Preloader />}>\r\n            <Component {...props} />\r\n            </Suspense>\r\n    }\r\n\r\n}\r\n\r\n","import React, { Suspense } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport store from './redux/redux-store';\r\n\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Setings from './components/Setings/Setings';\r\n\r\n\r\nimport UsersContainer from './components/Users/UsersContainer';\r\n\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport { compose } from 'redux';\r\nimport { initializeApp } from './redux/app-reducer'\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport { withSuspense } from './components/hoc/withSuspense';\r\n\r\n//import DialogsContainer from './components/Dialogs/DialogsContainer';\r\n//import ProfileContainer from './components/Profile/ProfileContainer';\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\nclass App extends React.Component {\r\n\r\n  cathcAllUnhandledErrors = (reason, promise) => {\r\n    alert(\"Some errors. See console\");\r\n    console.log(reason);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n    window.addEventListener(\"unhandledrejection\", this.cathcAllUnhandledErrors);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"unhandledrejection\", this.cathcAllUnhandledErrors)\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n\r\n    return (\r\n\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className=\"app-wrapper-content\">\r\n          <Switch>\r\n            <Redirect exact from=\"/\" to=\"/profile\" />\r\n            <Route path='/dialogs' render={withSuspense(DialogsContainer)} />\r\n            <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)} />\r\n            <Route path='/users' render={() => <UsersContainer pageTitle={\"Тайтл страницы из App.js\"} />} />\r\n            <Route path='/news' render={() => <News />} />\r\n            <Route path='/music' render={() => <Music />} />\r\n            <Route path='/setings' render={() => <Setings />} />\r\n            <Route path='/login' render={() => <Login />} />\r\n            <Route path='*' render={() => <div>404 NOT FOUND</div>} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp }))(App);\r\n\r\nconst NewApp = (props) => {\r\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <Provider store={store}>\r\n      <AppContainer />\r\n    </Provider>\r\n  </BrowserRouter>\r\n}\r\n\r\nexport default NewApp;","\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport NewApp from './App';\r\n\r\n\r\n    ReactDOM.render(<NewApp />, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.7614401d.svg\";","import React from 'react';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\nlet Preloader = (props) => {\r\n    return <div style={ {backgroundColor: 'white'} }>\r\n                <img src={preloader} /> \r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__353xy\",\"pageNumber\":\"Paginator_pageNumber__3uxwt\",\"selectedPage\":\"Paginator_selectedPage__2RGMW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__GWJBc\",\"error\":\"FormsControls_error__2l-is\",\"formSummaryError\":\"FormsControls_formSummaryError__2zbqF\"};","\r\nexport type FieldValidator = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidator = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidator => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2rISm\",\"loginBlock\":\"Header_loginBlock__11A55\"};"],"sourceRoot":""}