{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","MessageItem","props","className","s","message","DialogItem","path","id","dialog","to","activeClassName","active","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","messagesElement","messages","map","m","key","dialogsElement","dialogs","d","isAuth","dialogsItems","e","dispatch","sendMessage","newMessageBody","reset","mapStateToPropsForRedirect","auth","compose","connect","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,yHCQnKC,EALK,SAACC,GACpB,OAAO,yBAAKC,UAAWC,IAAEC,SAAUH,EAAMG,UCQ3BC,EATI,SAACJ,GAClB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OAAO,yBAAKL,UAAWC,IAAEK,QACzB,kBAAC,IAAD,CAASC,GAAIH,EAAMI,gBAAiBP,IAAEQ,QAASV,EAAMW,Q,gBCkCjDC,EAAcC,YAAiB,IAiB/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAfL,SAACf,GAEvB,OACC,0BAAMiB,SAAUjB,EAAMkB,cACrB,6BACC,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAChBC,SAAU,CAACC,IAAUX,GACvBD,KAAK,iBAAiBa,YAAY,wBAGnC,6BAAK,6CAOOC,EAjDC,SAACzB,GAEhB,IAAI0B,EAAQ1B,EAAM2B,YAEdC,EAAkBF,EAAMG,SAC1BC,KAAK,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAa5B,QAAS4B,EAAE5B,QAAS6B,IAAKD,EAAEzB,GAAIA,GAAIyB,EAAEzB,GAAIG,gBAAiBP,IAAEQ,YAEjFuB,EAAiBP,EAAMQ,QAAQJ,KAAK,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAYxB,KAAMwB,EAAExB,KAAMqB,IAAKG,EAAE7B,GAAIA,GAAI6B,EAAE7B,QAQxF,OAAKN,EAAMoC,OAGV,yBAAKnC,UAAWC,IAAEgC,SACjB,yBAAKjC,UAAWC,IAAEmC,cAChBJ,GAEF,yBAAKhC,UAAWC,IAAE2B,UACjB,6BAAMD,GACL,kBAACd,EAAD,CAAqBG,SAdL,SAACqB,EAAGC,GACvBvC,EAAMwC,YAAYF,EAAEG,gBACpBF,EAASG,YAAM,8BAGU,kBAAC,IAAD,CAAUlC,GAAI,Y,wCCtBrCmC,EAA6B,SAACjB,GAAD,MAAY,CACzCU,OAAQV,EAAMkB,KAAKR,S,OCgBRS,sBACdC,aAfqB,SAACpB,GACtB,MAAO,CACNC,YAAaD,EAAMC,gBAII,SAACY,GACzB,MAAO,CACNC,YAAa,SAACC,GAAD,OAAoBF,EAASQ,YAAmBN,UDP/B,SAACO,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAKlD,MAAMoC,OACT,kBAACY,EAAcE,KAAKlD,OADI,kBAAC,IAAD,CAAUQ,GAAG,eAHT,GACX2C,IAAMH,WAStC,OAFoCF,YAAQH,EAARG,CAAqCG,KCK9DJ,CAGbpB","file":"static/js/4.877673bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__237UM\",\"dialogsItems\":\"Dialogs_dialogsItems__et7kB\",\"active\":\"Dialogs_active__3caX_\",\"messages\":\"Dialogs_messages__1miBD\",\"message\":\"Dialogs_message__2np4L\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst MessageItem = (props) => {\r\n\treturn <div className={s.message}>{props.message}</div>\r\n\r\n}\r\n\r\nexport default MessageItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n\t let path = \"/dialogs/\" + props.id;\r\n \treturn <div className={s.dialog}>\r\n\t\t<NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n\t</div>\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport { reduxForm, Field, reset } from 'redux-form';\r\n\r\n\r\nimport MessageItem from \"./MessageItem/MessageItem\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n\tlet state = props.dialogsPage;\r\n\t\r\n\tlet messagesElement = state.messages\r\n\t\t.map( m => <MessageItem message={m.message} key={m.id} id={m.id} activeClassName={s.active} />);\r\n\r\n\tlet dialogsElement = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} /> );\r\n\r\n\r\n\tlet addNewMessage = (e, dispatch) => {\r\n\t\tprops.sendMessage(e.newMessageBody);\r\n\t\tdispatch(reset(\"dialogAddMessageForm\"));\r\n\t}\r\n\r\n\tif (!props.isAuth) return <Redirect to={\"/login\"} />\r\n\r\n\treturn  (\t\r\n\t\t<div className={s.dialogs}>\r\n\t\t\t<div className={s.dialogsItems}>\r\n\t\t\t\t{dialogsElement}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.messages}>\r\n\t\t\t\t<div>{messagesElement}</div>\r\n\t\t\t\t\t<AddMessageFormRedux onSubmit={addNewMessage} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n\treturn (\r\n\t\t<form onSubmit={props.handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t<Field component={Textarea}\r\n\t\t\t\t\t\tvalidate={[required, maxLength50]}\r\n\t\t\t\tname=\"newMessageBody\" placeholder=\"Enter your message\" />\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div><button>Send</button></div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"}) (AddMessageForm);\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    \r\n    let ConectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n\r\n    return ConectedAuthRedirectComponent;\r\n\r\n}\r\n\r\n","import { sendMessageCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tdialogsPage: state.dialogsPage,\r\n\t}\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tsendMessage: (newMessageBody) => dispatch(sendMessageCreator(newMessageBody))\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps, mapDispatchToProps),\r\n\twithAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}